<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.Cra2iTeT.mapper.TeacherMapper">

    <!--    <select id="getTeacher" resultType="Teacher">-->
    <!--        select * from mybatis.teacher-->
    <!--    </select>-->

    <select id="getTeacher" resultMap="tStudent">
        select s.id sid, s.name sname, t.name tname, t.id tid
        from `student` s,
             `teacher` t
        where s.tid = t.id
          and t.id = #{tid};
    </select>
    <resultMap id="tStudent" type="Teacher">
        <result property="id" column="tid"></result>
        <result property="name" column="tname"></result>
        <!--        复杂的属性，我们需要单独处理。对象：association 集合：collection
        JavaType="" 指定属性的类型
        结合中的泛型信息，我们使用ofType获取
        一次性把所有对应的学生查出来了，一个一个对应过去就行，所以不需要javaType
        -->
        <collection property="students" ofType="Student">
            <result property="id" column="sid"></result>
            <result property="name" column="sname"></result>
            <result property="tid" column="tid"></result>
        </collection>
    </resultMap>

    <select id="getTeacher2" resultMap="tStudent2">
        select * from mybatis.teacher where id = #{tid}
    </select>
    <resultMap id="tStudent2" type="Teacher">
        <collection property="students" javaType="ArrayList" ofType="Student" select="getStudentByTId" column="id"></collection>
    </resultMap>
    <select id="getStudentByTId" resultType="Student">
        select * from mybatis.student where `tid` = #{tid}
    </select>

</mapper>